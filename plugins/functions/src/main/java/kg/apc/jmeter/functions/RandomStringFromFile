package kg.apc.jmeter.functions;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import org.apache.jmeter.engine.util.CompoundVariable;
import org.apache.jmeter.functions.AbstractFunction;
import org.apache.jmeter.functions.InvalidVariableException;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.samplers.Sampler;
import org.apache.jmeter.threads.JMeterVariables;

public class RandomStringFromFile extends AbstractFunction{
	  
    private static final List<String> desc = new LinkedList<String>();  
    private static final String KEY = "__randomstrfile"; 
    private Object[] values;
    
    private static File f;
    private static FileReader read;
    private static BufferedReader reader;
    private static ArrayList<String> retList=new ArrayList<String>();
    private static Random rd=new Random();
    
    static {  
        desc.add("String File Path to get values from");  
        desc.add("Name of variable in which to store the result");  
    }

	@Override
	public List<String> getArgumentDesc() {
		return desc;
	}

	@Override
	public String execute(SampleResult sr, Sampler sl)
			throws InvalidVariableException {
		int flag=0;
		String temp;
		try {
			if(retList.size()==0){
				String filepath = ((CompoundVariable)this.values[0]).execute();
				f = new File(filepath);
				read = new FileReader(f);
				reader=new BufferedReader(read);
				while((temp=reader.readLine())!=null && !"".equals(temp)){  
			        retList.add(temp);  
			    }
				System.out.println("init str list!");
				//read.close();
			}
			flag=rd.nextInt(retList.size());
			JMeterVariables vars = getVariables();
			if (vars != null && values.length > 1) {
				String varName = ((CompoundVariable) values[1]).execute().trim();
				vars.put(varName, retList.get(flag));
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return retList.get(flag);
		
	}
  
	@Override
	public String getReferenceKey() {
		 return KEY;
	}

	@Override
	public void setParameters(Collection<CompoundVariable> paramCollection)
			throws InvalidVariableException {
		
		checkMinParameterCount(paramCollection, 1);  
        values = paramCollection.toArray();
	}

}
